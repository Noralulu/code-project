def parse_floats(data_list):
    return [float(item) if item.replace('.', '', 1).isdigit() else item for item in data_list]

def process_year_data(data_list):
    #result = []
    try:
            # 嘗試將第一個元素轉換為整數
            item_data = int(data_list[0])
            #result.append(item_data)

    except ValueError:# 第一個不可轉為整數
            # 如果轉換失敗，檢查是否有第二個元素
            if len(data_list) > 1:
                item_data = int(data_list[1])
                #print('b')
                #result.append(item_data)
            else:
                # 如果沒有第二個元素，可能需要處理或者報錯
                print(f"Error:  {data_list} 不再第二元素")

    #print(item_data)
    return item_data


def process_financial_data(file_path):
    structured_data = []
    current_year_data = []
    current_year = None

    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            
            for line in file:
                line = line.strip()

                #print('line:',line)
                if '年' in line:
                    #print(line)
                    if current_year_data:  # Save the previous year data
                        structured_data.append([current_year, current_year_data])
                        
                    current_year_noyear = line.replace('年', '')  # New year begins
                    current_year_noyear = current_year_noyear.split( )
                    #print('current_year_noyear',current_year_noyear)
                    current_year = process_year_data(current_year_noyear)
                    current_year_data = []

                elif '月' in line:
                    parts = line.split()
                    if '月' in parts[1]:
                        parts = parts[1:]
                    month = parts[0].replace('月', '')
                    numeric_data = parts[1:]  # 數值
                    current_year_maoth = [month] + numeric_data
                    current_year_data.append(current_year_maoth)
                    #print('current_year_data',current_year_data)
    
                elif '季' in line:
                    parts = line.split()            
                    season = parts[0].replace('季','')##['4', 5784945.0, '-0.68', 6038907.0, 192222.0, 259093.0, 8247.0, 26.52, 37.96]
                    season = process_year_data(season)                
                    numeric_data = parts[1:]  # 數值                   
                    whole_numeric_value = [season] + numeric_data
                    ##print("whole_numeric_value:",whole_numeric_value)
                    current_year_data.append(whole_numeric_value)
        
        if current_year_data:  
            structured_data.append([current_year, current_year_data])
    
    except FileNotFoundError:
        return f"Error: 文件 {file_path} 無法找到"
    except Exception as e:
        return f"無法處理該檔案： {str(e)}"
     
    return structured_data

gdp_growth_data = process_financial_data('國民所得重要指標.txt') 
unemployment_data = process_financial_data('勞動力與就業.txt') 

def wide_range_cal_data(data,index):
    date_values= [float(row[index] for row in data)] ##處理某行數字傳成浮點數
    mean = sum(date_values)/len(date_values)

    sorted_values = sorted(date_values)
    q2 = sorted_values[len(sorted_values)//2] ## median
        
    '''
    q1 = sorted_values[len(sorted_values)//4]
    q3 = sorted_values[len(sorted_values)//4 * 3 ]
    iqr =  q3 -q1 #四分位距
    '''
    min_value = min(date_values)
    max_values = max(date_values)


    return mean, q2, min_value, max_values

def find_year_range_index(data,year): #找出該行索引\
    # 尋找包含index的子列表索引
    data_list_index1 = -1
    for sublist in data:
        data_list_index1 += 1
        if year in sublist:
            data_list_index2 = data.index(sublist)
            break
    return data_list_index1,data_list_index2

def find_year_range_exist(data,year): #找出是存在該年
    data_list_index1 = -1

    for sublist in data:
        data_list_index1 += 1
        if year in sublist:
            data_list_index2 = data.index(sublist)
            return True
        
    return False
    

'''
def outliers_find(date_values):
    #outliers 異常值
    
        wide_range_cal_data(data,index)
        
    sorted_values = sorted(date_values)
    q1 = sorted_values[len(sorted_values)//4]
    q2 = sorted_values[len(sorted_values)//2] ## median
    q3 = sorted_values[len(sorted_values)//4 * 3 ]
    iqr =  q3 -q1 #四分位距

    lower_bound = q1 - 1.5 * iqr
    upper_bound = q3 + 1.5 * iqr
    outliers = [x for x in date_values if x < lower_bound or x > upper_bound]

    
    return q1, q2, q3, outliers 

def gdp_growth_data_Cal(gdp_growth_data,year_index):
    
    limited_year_range = gdp_growth_data_no_year[year_index]
    gdp_growth_data_no_year = limited_year_range[1:]

    for i in len(gdp_growth_data_no_year):
        wide_range_cal_data(gdp_growth_data_no_year)
'''

## Limited_year_range_data = Data[year_index][1] #找範圍
'''
#找年分
    year_gdp = gdp_growth_data[gdp_growth_data_list_year_index1][gdp_growth_data_list_data_index2] 
    year_unemployment = unemployment_data[unemployment_data_list_year_index1][unemployment_data_list_index2]

'''

def set_input(year_data_set,input_year): #data1 adata2
    gpt_exist = False
    unemployment_exist = False

    #取資料
    gdp_growth_data = process_financial_data('國民所得重要指標.txt') 
    unemployment_data = process_financial_data('勞動力與就業.txt')
    try:
        #找年份索引
        gdp_growth_data_list_year_index1,gdp_growth_data_list_data_index2 = find_year_range_index(gdp_growth_data,input_year) #找年分
        unemployment_data_list_year_index1,unemployment_data_list_index2 = find_year_range_index(unemployment_data,input_year)#找年分
        gpt_exist = unemployment_exist = True
    except:
        #若在其中
        if find_year_range_exist(gdp_growth_data,input_year):
            gpt_exist = True
        elif find_year_range_exist(unemployment_data,input_year):
            unemployment_exist = True
        else:
            print(f"年份{input_year}資料不存在")
    finally:    
            print(f"年份{input_year}已輸入")

    #取所需的年份範圍
        # 該年資料擷取
            # GPT
    if gpt_exist:
        gdp_growth_range_data= gdp_growth_data[gdp_growth_data_list_year_index1][gdp_growth_data_list_data_index2]
        gdp_mean, gdp_q2, gdp_min_value, gdp_max_values = wide_range_cal_data(gdp_growth_range_data,1)
        # 失業與勞動力
    if unemployment_exist:   
        unemployment_rate_data= unemployment_data[unemployment_data_list_year_index1][unemployment_data_list_index2]
        Workforce_mean, Workforce_q2, Workforce_min_value, Workforce_max_values = wide_range_cal_data(unemployment_rate_data,6)
        unemployment_mean, unemployment_q2,unemployment_value, unemployment_max_values = wide_range_cal_data(unemployment_rate_data,7)
    
    #同年份
    if gpt_exist == True and unemployment_exist == True:

        year_data_set[input_year] = {
                'GDP':{'中位數':gdp_mean,'平均值':gdp_q2,'最大數':gdp_min_value,'最小數':gdp_max_values},
                '勞動力':{'中位數':Workforce_mean,'平均值': Workforce_q2,'最大數':Workforce_min_value,'最小數': Workforce_max_values},
                '失業率':{'中位數':unemployment_mean,'平均值':unemployment_q2,'最大數':unemployment_value,'最小數':unemployment_max_values}}
    
    elif gpt_exist == True and unemployment_exist == False:
        year_data_set[input_year] = { 
                'GDP':{'無資料'},
                '勞動力':{'中位數':Workforce_mean,'平均值': Workforce_q2,'最大數':Workforce_min_value,'最小數': Workforce_max_values},
                '失業率':{'中位數':unemployment_mean,'平均值':unemployment_q2,'最大數':unemployment_value,'最小數':unemployment_max_values}}
        print(f"年份勞動力與就業年份{input_year}資料不存在")

    elif gpt_exist == False and unemployment_exist == True: 
        year_data_set[input_year] = {
                'GDP':{'中位數':gdp_mean,'平均值':gdp_q2,'最大數':gdp_min_value,'最小數':gdp_max_values},
                '勞動力':{'無資料'},
                '失業率':{'無資料'}}
        print(f"年份勞動力與就業年份{input_year}資料不存在")
    else:
        year_data_set[input_year] = {
                'GDP':{'無資料'},
                '勞動力':{'無資料'},
                '失業率':{'無資料'}}
        print(f"年份勞動力與就業年份{input_year}與國民所得重要指標年份{input_year}資料不存在")
    
    return year_data_set
    
        
        


def main():
        try:
            input01 = int(input("開始範圍："))
            input02 = int(input("結束範圍："))

            sorce = input01
            range_year = [sorce] 
            year_data_set  = {}
            
            #顯示年份列表
            for i in range(input02-input01):
                sorce +=1
                range_year.append(sorce)
            
            
            for input_year in range_year:
                year_data_set = set_input(year_data_set,input_year)

            '''
            input01_range = data2[index1:index2 + 1]
            print("範圍內的子列表：", input01_range)
            '''
            print(year_data_set)
        #年份不再範圍無資料
        except ValueError:
             print("輸入的數值不在範圍內")

main()
