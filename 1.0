def parse_floats(data_list):
    return [float(item) if item.replace('.', '', 1).isdigit() else item for item in data_list]

def process_year_data(data_list):
    result = []
    for item in data_list:
        try:
            # 嘗試將第一個元素轉換為整數
            item_data = int(item[0])
            result.append(item_data)
        except ValueError:# 第一個不可轉為整數
            # 如果轉換失敗，檢查是否有第二個元素
            if len(item) > 1:
                item_data = int(item[1])
                result.append(item_data)
            else:
                # 如果沒有第二個元素，可能需要處理或者報錯
                print(f"Error:  {item} 不再第二元素")
    return result

def process_financial_data(file_path):
    structured_data = []
    current_year_data = []
    current_year = None

    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            for line in file:
                line = line.strip()
                #print('line:',line)
                if '年' in line:
                    #print(line)
                    if current_year_data:  # Save the previous year data
                        structured_data.append([current_year, current_year_data])
                        
                    current_year_noyear = line.replace('年', '')  # New year begins
                    current_year_noyear = current_year_noyear.split( )
                    #print('current_year_noyear',current_year_noyear)
                    current_year = process_year_data(current_year_noyear)
                    current_year_data = []

                elif '月' in line:
                    parts = line.split()
                    if '月' in parts[1]:
                        parts = parts[1:]
                    month = parts[0].replace('月', '')
                    numeric_data = parts[1:]  # 數值
                    current_year_maoth = [month] + numeric_data
                    current_year_data.append(current_year_maoth)
                    #print('current_year_data',current_year_data)
    
                elif '季' in line:
                    parts = line.split()            
                    season = parts[0].replace('季','')##['4', 5784945.0, '-0.68', 6038907.0, 192222.0, 259093.0, 8247.0, 26.52, 37.96]
                    season = process_year_data(season)                
                    numeric_data = parts[1:]  # 數值                   
                    whole_numeric_value = [season] + numeric_data
                    ##print("whole_numeric_value:",whole_numeric_value)
                    current_year_data.append(whole_numeric_value)
        
        if current_year_data:  
            structured_data.append([current_year, current_year_data])
    
    except FileNotFoundError:
        return f"Error: 文件 {file_path} 無法找到"
    except Exception as e:
        return f"無法處理該檔案： {str(e)}"
    
    
    print(structured_data)

gdp_growth_data = process_financial_data('國民所得重要指標.txt') 
unemployment_data = process_financial_data('勞動力與就業.txt') ##ok

def cal_data(data,index):
    date_values= [float(row[1] for row in data)] ##處理某行數字傳成浮點數
    mean = sum(date_values)/len(date_values)

    sorted_values = sorted(date_values)
    q1 = sorted_values[len(sorted_values)//4]
    q2 = sorted_values[len(sorted_values)//2] ## median
    q3 = sorted_values[len(sorted_values)//4 * 3 ]
    iqr =  q3 -q1 #四分位距

    #outliers 異常值
    lower_bound = q1 - 1.5 * iqr
    upper_bound = q3 + 1.5 * iqr
    outliers = [x for x in date_values if x < lower_bound or x > upper_bound]

    min_value = min(date_values)
    max_values = max(date_values)

    return mean, q2, min_value, max_values, q1, q3, outliers

def set_input(): #data1 adata2
    data_set = {}


