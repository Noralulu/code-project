import matplotlib.pyplot as plt

def process_data_with_join(data):
    processed_lines = []
    for line in data:
        line = line.strip()
        if not line:
            continue
        data_items = line.split()
        joined_line = " ".join(data_items)
        processed_lines.append(joined_line)
    return processed_lines


def transform_dataset_simple(year, type_year, or_data, transformed_data_sublist, transformed_data):
    for entry in or_data:
        if year == entry[0][0]:
            transformed_data_sublist.append(entry[1:])
    transformed_data.append([[year]] + transformed_data_sublist)
    return transformed_data, transformed_data_sublist, year



def reset_data(file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        lines = [line.strip() for line in file if line.strip()]
    
    # 清理數據，過濾掉長度不符合的行
    data_length = len(lines[len(lines) // 2].split())
    cleaned_data = [line for line in lines if len(line.split()) == data_length]
    
    return cleaned_data





def process_year_data(data_list):

    try:
            # 嘗試將第一個元素轉換為整數
            item_data = int(data_list[0])

    except ValueError:# 第一個不可轉為整數
            # 如果轉換失敗，檢查是否有第二個元素
            if len(data_list) > 1:
                item_data = int(data_list[1])

            else:
                # 如果沒有第二個元素，可能需要處理或者報錯
                print(f"Error:  {data_list} 不再第二元素")

    return item_data


def process_financial_data(file_path):
    try:
        clean_list = reset_data(file_path)
        tmp_list = []

        for line in clean_list:
            parts = line.split()
            if '年' in parts[0]:
                year, period = parts[0].split('年')
                parts[0] = period.replace('月', '').replace('季', '').replace('第', '')
                parts.insert(0, [year])
            tmp_list.append(parts)

        transformed_data = []
        fin_year = 0
        for type_year in tmp_list:
            if fin_year == type_year[0][0]:
                continue

            transformed_data_sublist = []
            transformed_data, transformed_data_sublist, fin_year = transform_dataset_simple(
                type_year[0][0], type_year, tmp_list, transformed_data_sublist, transformed_data
            )
        return transformed_data

    except FileNotFoundError:
        return f"Error: 文件 {file_path} 無法找到"
    except Exception as e:
        return f"無法處理該檔案： {str(e)}"




def convert_to_floats_SUB(str_list):
    converted_floats = []
    for s in str_list:
        if isinstance(s, str):  # 检查 s 是否为字符串
            cleaned_str = s.replace('"', '').replace(',', '')
            float_value = float(cleaned_str)
            converted_floats.append(float_value)
        else:
            print("跳過缺少值:", s)
    return converted_floats

def convert_to_floats(str_list):
    if all(isinstance(item, str) for item in str_list):  # 检查所有元素是否为字符串
        converted_floats = convert_to_floats_SUB(str_list)
    else:
        print("输入列表包含非字符串元素。")
    return converted_floats


def wide_range_cal_data(str_range_data, index):
    try:
        trans_value = convert_to_floats(str_range_data)
        if len(trans_value) <= index:
            raise IndexError("指定索引超出長度")

        date_values = [trans_value[index]] if index < len(trans_value) else []

        if not date_values:
            raise ValueError("數據為空<無法計算")

        mean = sum(date_values) / len(date_values)
        sorted_values = sorted(date_values)
        q2 = sorted_values[len(sorted_values) // 2]
        min_value = min(date_values)
        max_values = max(date_values)

        return mean, q2, min_value, max_values
    except Exception as e:
        print("函式執行錯誤:", e)
        return None, None, None, None


#目的：
def find_year_range_index(data,year): #找出該行索引\ #輸入的年
    # 尋找包含index的子列表索引
    data_list_index1 = -1
    for sublist in data:
        data_list_index1 += 1
        if year in sublist:
            data_list_index2 = sublist.index(year)
            break
    return data_list_index1,data_list_index2


def find_year_range_exist(data,year): #找出是存在該年nji3up3
    data_list_index1 = -1

    for sublist in data:
        data_list_index1 += 1
        if year in sublist:
            data_list_index2 = data.index(sublist)
            return True
        
    return False


def set_input(year_data_set,input_year): #data1 adata2
    gpt_exist = False
    unemployment_exist = False

    # 初始化变量，防止 UnboundLocalError
    Workforce_mean = Workforce_q2 = Workforce_min_value = Workforce_max_values = None
    gdp_mean = gdp_q2 = gdp_min_value = gdp_max_values = None
    unemployment_mean = unemployment_q2 = unemployment_value = unemployment_max_values = None

    #取資料
    gdp_growth_data = process_financial_data('國民所得統計常用資料.txt')
    unemployment_data = process_financial_data('人力資源主要指標.txt')
    try:
        #找年份索引#某行#某位置
        gdp_growth_data_list_year_index1,gdp_growth_data_list_data_index2 = find_year_range_index(gdp_growth_data,[str(input_year)]) #找年分
        unemployment_data_list_year_index1,unemployment_data_list_index2 = find_year_range_index(unemployment_data,[str(input_year)])#找年分
        gpt_exist = unemployment_exist = True #是否同年份
        print(f"{input_year}年份勞動力與{input_year}年份就業與國民所得重要指標資料讀取")
    except:
        #若在其中
        if find_year_range_exist(gdp_growth_data,[str(input_year)]):
            gpt_exist = True
            print(f"{input_year}年份勞動力不存在")
        elif find_year_range_exist(unemployment_data,[str(input_year)]):
            unemployment_exist = True
            print(f"{input_year}年國民所得重要指標資料不存在")
        else:
            print(f"{input_year}年份勞動力與{input_year}年份就業與國民所得重要指標資料不存在")
    finally:    
            print(f"年份{input_year}已輸入")


    if gpt_exist:
        
        gdp_growth_range_data= gdp_growth_data[gdp_growth_data_list_year_index1][gdp_growth_data_list_data_index2 +1]
        gdp_mean, gdp_q2, gdp_min_value, gdp_max_values = wide_range_cal_data(gdp_growth_range_data,4)
        

    if unemployment_exist:   
        unemployment_rate_data= unemployment_data[unemployment_data_list_year_index1][unemployment_data_list_index2 +1]
        Workforce_mean, Workforce_q2, Workforce_min_value, Workforce_max_values = wide_range_cal_data(unemployment_rate_data,3)
        unemployment_mean, unemployment_q2,unemployment_value, unemployment_max_values = wide_range_cal_data(unemployment_rate_data,5)
    
    #同年份
    if gpt_exist == True and unemployment_exist == True:

        year_data_set[input_year] = {
                'GDP':{'中位數':gdp_mean,'平均值':gdp_q2,'最大數':gdp_min_value,'最小數':gdp_max_values},
                '勞動力':{'中位數':Workforce_mean,'平均值': Workforce_q2,'最大數':Workforce_min_value,'最小數': Workforce_max_values},
                '失業率':{'中位數':unemployment_mean,'平均值':unemployment_q2,'最大數':unemployment_value,'最小數':unemployment_max_values}}
    
    elif gpt_exist == True and unemployment_exist == False:
        year_data_set[input_year] = { 
                'GDP':{'無資料'},
                '勞動力':{'中位數':Workforce_mean,'平均值': Workforce_q2,'最大數':Workforce_min_value,'最小數': Workforce_max_values},
                '失業率':{'中位數':unemployment_mean,'平均值':unemployment_q2,'最大數':unemployment_value,'最小數':unemployment_max_values}}
        print(f"年份勞動力與就業年份{input_year}資料不存在")

    elif gpt_exist == False and unemployment_exist == True: 
        year_data_set[input_year] = {
                'GDP':{'中位數':gdp_mean,'平均值':gdp_q2,'最大數':gdp_min_value,'最小數':gdp_max_values},
                '勞動力':{'無資料'},
                '失業率':{'無資料'}}
        print(f"年份勞動力與就業年份{input_year}資料不存在")
    else:
        year_data_set[input_year] = {
                'GDP':{'無資料'},
                '勞動力':{'無資料'},
                '失業率':{'無資料'}}
        
    return year_data_set



def plot_data(year_data_set,num):
    #years = sorted(year_data_set.keys())
    years = year_data_set.keys()
    gdp_means = [year_data_set[year]['GDP']['平均值'] if 'GDP' in year_data_set[year] and year_data_set[year]['GDP'] != {'無資料'} else None for year in years]
    workforce_means = [year_data_set[year]['勞動力']['平均值'] if '勞動力' in year_data_set[year] and year_data_set[year]['勞動力'] != {'無資料'} else None for year in years]
    unemployment_means = [year_data_set[year]['失業率']['平均值'] if '失業率' in year_data_set[year] and year_data_set[year]['失業率'] != {'無資料'} else None for year in years]

    plt.figure(figsize=(60, 100))
    if num == 1:
        plt.subplot(1, 3, 1)
        plt.plot(years, gdp_means, marker='o', label='GDP 平均值')
        plt.title('GDP 平均值')
        plt.xlabel('年份')
        plt.ylabel('值')
        plt.tight_layout()
        plt.show()
    elif num == 2:
        plt.subplot(1, 3, 2)
        plt.plot(years, workforce_means, marker='o', label='勞動力 平均值')
        plt.title('勞動力 平均值')
        plt.xlabel('年份')
        plt.ylabel('值')
        plt.grid(True)
        plt.tight_layout()
        plt.show()
    elif num == 3:
        plt.subplot(1, 3, 3)
        plt.plot(years, unemployment_means, marker='o', label='失業率 平均值')
        plt.title('失業率 平均值')
        plt.xlabel('年份')
        plt.ylabel('值')
        plt.grid(True)
        plt.tight_layout()
        plt.show()


def recursive_parse_data(lines, index=0, data=None):
    if data is None:
        data = {}
    if index >= len(lines):
        return data
    line = lines[index]
    if '年' in line:
        current_year = line.split('年')[0]
        data[current_year] = []
    else:
        values = list(map(float, line.split()))
        data[current_year].append(values)
    return recursive_parse_data(lines, index + 1, data)


def read_data(file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        lines = [line.strip() for line in file if line.strip()]
    return lines

    

def calculate_statistics(data):
    if not data:
        return {'mean': None, 'median': None, 'min': None, 'max': None}
    
    mean = sum(data) / len(data)
    sorted_data = sorted(data)
    median = sorted_data[len(data) // 2] if len(data) % 2 != 0 else (sorted_data[len(data) // 2 - 1] + sorted_data[len(data) // 2]) / 2.0
    min_value = min(data)
    max_value = max(data)

    return {'mean': mean, 'median': median, 'min': min_value, 'max': max_value}

def recursive_calculate_statistics(data, keys=None, index=0, statistics=None):
    if statistics is None:
        statistics = {}
    if keys is None:
        keys = list(data.keys())
    if index >= len(keys):
        return statistics
    
    year = keys[index]
    year_data = []
    for values in data[year]:
        year_data.extend(values)

    stats = calculate_statistics(year_data)
    statistics[year] = stats
    
    return recursive_calculate_statistics(data, keys, index + 1, statistics)

def main():
    try:
            input01 = int(input("開始範圍："))
            input02 = int(input("結束範圍："))
            num = int(input("1:GDP, 2:勞動力, 3:失業率:"))
            sorce = input01
            range_year = [sorce] 
            year_data_set  = {}
            
            #顯示年份列表
            for i in range(input02-input01):
                sorce +=1
                range_year.append(sorce)
            #    print("sorce ",sorce )
            #print("range_year ",range_year )
            
            for input_year in range_year:
                #print("input_year ",input_year )
                year_data_set = set_input(year_data_set,input_year)
            

            gdp_lines = read_data('勞動力與就業.txt')
            people_lines = read_data('國民所得重要指標.txt')
        

            gdp_data = recursive_parse_data(gdp_lines)
            people_data = recursive_parse_data(people_lines)

            gdp_statistics = recursive_calculate_statistics(gdp_data)
            people_statistics = recursive_calculate_statistics(people_data)

            if num == 1:
                plot_data(gdp_statistics, num)
            elif num == 2:
                plot_data(people_statistics, num)
            elif num == 3:
                plot_data(people_statistics, num)

    except ValueError:
        print("輸入的數值不在範圍內")

main()
